import React, { useState, useMemo, useEffect, useRef } from 'react';
import { ShoppingCart, Star, X, Plus, Minus, ArrowRight, Search, Frown, Package, User, Home, Heart, CheckCircle, Truck, Shield, Edit, Trash2, PlusCircle, ChevronDown, LogOut, Bell, Gift, KeyRound, AlertCircle, BarChart2, DollarSign, Users as UsersIcon, ShoppingBag, LayoutDashboard } from 'lucide-react';
// لإضافة الرسوم البيانية، سنحتاج إلى مكتبة مثل recharts
// في بيئة تطوير حقيقية، ستقوم بتثبيتها عبر: npm install recharts
// هنا، سنقوم باستيرادها مباشرة
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, PieChart, Pie, Cell, LineChart, Line } from 'recharts';


// --- بيانات المواقع العراقية (تبقى كما هي) ---
const iraqiAreas = {
    "بغداد": ["الكرادة", "الأعظمية", "مدينة الصدر", "الزعفرانية", "بغداد الجديدة", "المنصور", "الكاظمية", "الدورة", "العامرية", "اليرموك", "الغزالية", "السيدية", "حي الجامعة", "العدل", "البياع", "المدائن", "النهروان", "بسماية", "الطارمية", "أبو غريب", "الرضوانية"],
    "البصرة": ["مركز البصرة", "المعقل", "التنومة", "الزبير", "سفوان", "أم قصر", "القرنة", "المدينة", "أبو الخصيب", "حمدان", "الفاو", "الهوير", "الهارثة", "الدير"],
    "نينوى": ["الموصل الأيمن", "الموصل الأيسر", "حمام العليل", "الشورة", "القيارة", "تلعفر", "زمار", "ربيعة", "العياضية", "الحمدانية (قرقوش)", "برطلة", "كرمليس", "بعشيقة", "سنجار", "الشمال (سنوني)", "القيروان", "الشيخان", "القوش", "الحضر", "تل عبطة"],
    "أربيل": ["مركز أربيل", "عنكاوة", "بحركة", "بيرمام (صلاح الدين)", "سوران", "ديانا", "خليفان", "شقلاوة", "حرير", "كويسنجق", "طقطق", "جومان", "قسري", "ميركه سور", "بارزان"],
    "السليمانية": ["مركز السليمانية", "بكرة جو", "جمجمال", "شورَش", "كلار", "رزكاري", "كفري", "دوكان", "سورداش", "حلبجة", "سيروان", "بيارة", "دربندخان", "بنجوين", "رانية", "جوارقورنة"],
    "دهوك": ["مركز دهوك", "مانكيش", "زاخو", "دركار", "بطوفا", "العمادية", "سرسنك", "بامشمش", "سميل", "فايدة", "أقري (عقرة)", "دينارتة"],
    "كركوك": ["مركز كركوك", "التون كوبري", "ليلان", "الحويجة", "الزاب", "الرياض", "العباسي", "داقوق", "تازة خورماتو", "الدبس", "سركران"],
    "الأنبار": ["الرمادي", "الحبانية", "الخالدية", "الفلوجة", "الكرمة", "الصقلاوية", "العامرية", "هيت", "البغدادي", "كبيسة", "القائم", "الكرابلة", "العبيدي", "حديثة", "بروانة", "الحقلانية", "عنة", "راوة", "الرطبة", "النخيب"],
    "بابل": ["الحلة", "الإمام", "أبي غرق", "المحاويل", "المشروع", "النيل", "المسيب", "الإسكندرية", "جرف النصر", "الهاشمية", "المدحتية", "الشوملي", "القاسم"],
    "كربلاء": ["مركز كربلاء", "الحر", "عين التمر", "الأخيضر", "الهندية (طويريج)", "الخيرات", "جدول الغربي"],
    "النجف": ["مركز النجف", "الحيدرية", "الكوفة", "العباسية", "الحرية", "المناذرة (الحيرة)", "القادسية", "المشخاب"],
    "القادسية": ["الديوانية", "الشافعية", "السدير", "عفك", "آل بدير", "سومر", "الشامية", "غماس", "المهناوية", "الحمزة", "السنية"],
    "المثنى": ["السماوة", "الرميثة", "الخضر", "الدراجي", "السلمان", "بصية", "الوركاء", "الهلال"],
    "ذي قار": ["الناصرية", "أور", "البطحاء", "الشطرة", "الغراف", "الرفاعي", "قلعة سكر", "النصر", "الجبايش", "سوق الشيوخ", "الفهود"],
    "ميسان": ["العمارة", "كميت", "المشرح", "علي الغربي", "علي الشرقي", "الميمونة", "السلام", "قلعة صالح", "الكحلاء", "المجر الكبير"],
    "واسط": ["الكوت", "الشيخ سعد", "الحي", "الموفقية", "العزيزية", "الدبوني", "الصويرة", "الزبيدية", "النعمانية", "الأحرار", "بدرة", "جصان"],
    "صلاح الدين": ["تكريت", "العلم", "الدور", "سامراء", "الضلوعية", "المعتصم", "بلد", "يثرب", "الاسحاقي", "طوز خورماتو", "آمرلي", "سليمان بيك", "الشرقاط", "بيجي", "الصينية"],
    "ديالى": ["بعقوبة", "بهرز", "كنعان", "المقدادية (شهربان)", "أبي صيدا", "الوجيهية", "خانقين", "جلولاء", "السعدية", "مندلي", "بلدروز", "قزانية", "الخالص", "هبهب"]
};

// --- بيانات أولية ---
const initialProducts = [
    { id: 1, name: 'ساعة ذكية حديثة مقاومة للماء مع GPS', price: 250000, images: ['https://placehold.co/600x600/3498db/ffffff?text=Image+1', 'https://placehold.co/600x600/3498db/ffffff?text=Image+2', 'https://placehold.co/600x600/3498db/ffffff?text=Image+3'], rating: 5, description: 'ساعة ذكية متطورة مع نظام تتبع المواقع (GPS)، مقاومة للماء، وتصميم أنيق يناسب جميع الأذواق.', category: 'إلكترونيات', featured: true, stock: 10, pointsEarned: 250 },
    { id: 2, name: 'سماعات لاسلكية مع عازل للضوضاء', price: 125000, images: ['https://placehold.co/600x600/2ecc71/ffffff?text=Headphones'], rating: 4, description: 'سماعات أذن لاسلكية توفر تجربة صوتية نقية مع تقنية عزل الضوضاء الفعالة.', category: 'إلكترونيات', stock: 4, pointsEarned: 100 },
    { id: 3, name: 'لابتوب محمول للألعاب والأعمال', price: 1500000, images: ['https://placehold.co/600x600/e74c3c/ffffff?text=Laptop+Front', 'https://placehold.co/600x600/e74c3c/ffffff?text=Laptop+Side'], rating: 5, description: 'لابتوب قوي بمعالج حديث وكرت شاشة مخصص للألعاب والتطبيقات الهندسية.', category: 'إلكترونيات', featured: true, stock: 5, pointsEarned: 1500 },
    { id: 4, name: 'حذاء رياضي مريح للجري', price: 95000, images: ['https://placehold.co/600x600/1abc9c/ffffff?text=Sneakers+1', 'https://placehold.co/600x600/1abc9c/ffffff?text=Sneakers+2'], rating: 4, description: 'حذاء رياضي مريح مصمم خصيصًا للجري والتمارين الرياضية، يوفر دعمًا ممتازًا للقدم.', category: 'ملابس', featured: true, stock: 0, pointsEarned: 50 },
];
const initialCoupons = [ { code: 'VIP10', type: 'percent', value: 10, id: 1 }, { code: 'SALE25000', type: 'fixed', value: 25000, id: 2 }];
const categories = ["الكل", "إلكترونيات", "اكسسوارات", "ملابس"];
const ADMIN_EMAIL = "admin@shopvip.iq";
const ADMIN_PASSWORD = "adminpassword";
const DELIVERY_FEE = 5000;
const IQD_PER_POINT = 10;
const orderStatuses = { 'pending': { text: 'قيد المراجعة', color: 'bg-yellow-100 text-yellow-800', selectColor: 'bg-yellow-100 border-yellow-500' }, 'shipped': { text: 'تم الشحن', color: 'bg-blue-100 text-blue-800', selectColor: 'bg-blue-100 border-blue-500' }, 'delivered': { text: 'تم التوصيل', color: 'bg-green-100 text-green-800', selectColor: 'bg-green-100 border-green-500' }, 'cancelled': { text: 'ملغي', color: 'bg-red-100 text-red-800', selectColor: 'bg-red-100 border-red-500' },};

// --- المكونات (معظمها يبقى كما هو) ---
const NotificationToast = ({ notification, onClose }) => { useEffect(() => { const timer = setTimeout(() => { onClose(); }, 5000); return () => clearTimeout(timer); }, [onClose]); const typeClasses = { info: 'bg-blue-500', success: 'bg-green-500', error: 'bg-red-500', }; return (<div className={`fixed top-20 right-5 w-auto max-w-sm p-4 rounded-lg shadow-lg text-white ${typeClasses[notification.type] || 'bg-gray-800'} z-[200] animate-toast-in`}><div className="flex items-center justify-between"><p className="font-semibold">{notification.message}</p><button onClick={onClose} className="ml-4 -mr-2 p-1 rounded-full hover:bg-white/20"><X size={18} /></button></div></div>);};
const LoginPage = ({ onLogin, fromCheckout }) => { const [isLoginView, setIsLoginView] = useState(true); const [email, setEmail] = useState(''); const [password, setPassword] = useState(''); const [fullName, setFullName] = useState(''); const [phone, setPhone] = useState(''); const [confirmPassword, setConfirmPassword] = useState(''); const [errors, setErrors] = useState({}); const validateRegistration = () => { const newErrors = {}; if (!fullName.trim()) newErrors.fullName = "الاسم الكامل مطلوب."; if (!/^(07[5789][0-9]{8})$/.test(phone)) newErrors.phone = "صيغة رقم الهاتف غير صحيحة (مثال: 07812345678)."; if (password.length < 6) newErrors.password = "كلمة المرور يجب أن تكون 6 أحرف على الأقل."; if (password !== confirmPassword) newErrors.confirmPassword = "كلمتا المرور غير متطابقتين."; setErrors(newErrors); return Object.keys(newErrors).length === 0; }; const handleSubmit = (e) => { e.preventDefault(); setErrors({}); if (isLoginView) { if (email.toLowerCase() === ADMIN_EMAIL) { if (password === ADMIN_PASSWORD) { onLogin({ email, loyaltyPoints: 9999, fullName: 'المدير العام', phone: '07700000000' }); } else { setErrors({ general: 'كلمة مرور المدير غير صحيحة.' }); } } else { onLogin({ email, loyaltyPoints: 100, fullName: 'زبون مسجل', phone: '07812345678' }); } } else { if (validateRegistration()) { onLogin({ email, fullName, phone, loyaltyPoints: 50 }); } } }; return (<div className="container mx-auto px-4 py-8"><div className="max-w-md mx-auto bg-white p-8 rounded-xl shadow-lg">{fromCheckout && <div className="bg-blue-100 border-l-4 border-blue-500 text-blue-700 p-4 mb-6" role="alert"><p className="font-bold">ملاحظة</p><p>يجب عليك تسجيل الدخول أو إنشاء حساب للمتابعة.</p></div>}<h2 className="text-2xl font-bold text-center mb-6">{isLoginView ? 'تسجيل الدخول' : 'إنشاء حساب جديد'}</h2><form onSubmit={handleSubmit} className="space-y-4"><input type="email" placeholder="البريد الإلكتروني" value={email} onChange={e => setEmail(e.target.value)} className="w-full p-3 border border-gray-300 rounded-lg" required/> {!isLoginView && (<><div><input type="text" placeholder="الاسم الكامل" value={fullName} onChange={e => setFullName(e.target.value)} className={`w-full p-3 border rounded-lg ${errors.fullName ? 'border-red-500' : 'border-gray-300'}`} />{errors.fullName && <p className="text-red-500 text-xs mt-1">{errors.fullName}</p>}</div><div><input type="tel" placeholder="رقم الهاتف (07...)" value={phone} onChange={e => setPhone(e.target.value)} className={`w-full p-3 border rounded-lg ${errors.phone ? 'border-red-500' : 'border-gray-300'}`} />{errors.phone && <p className="text-red-500 text-xs mt-1">{errors.phone}</p>}</div></>)}<div><input type="password" placeholder="كلمة المرور" value={password} onChange={e => setPassword(e.target.value)} className={`w-full p-3 border rounded-lg ${errors.password ? 'border-red-500' : 'border-gray-300'}`} required/>{errors.password && <p className="text-red-500 text-xs mt-1">{errors.password}</p>}</div>{!isLoginView && (<div><input type="password" placeholder="تأكيد كلمة المرور" value={confirmPassword} onChange={e => setConfirmPassword(e.target.value)} className={`w-full p-3 border rounded-lg ${errors.confirmPassword ? 'border-red-500' : 'border-gray-300'}`} />{errors.confirmPassword && <p className="text-red-500 text-xs mt-1">{errors.confirmPassword}</p>}</div>)}{errors.general && <p className="text-red-500 text-sm text-center">{errors.general}</p>}<button type="submit" className="w-full bg-blue-600 text-white py-3 rounded-lg font-semibold hover:bg-blue-700">{isLoginView ? 'تسجيل الدخول' : 'إنشاء حساب'}</button></form><button onClick={() => { setIsLoginView(!isLoginView); setErrors({}); }} className="w-full text-center mt-4 text-sm text-blue-600 hover:underline">{isLoginView ? 'ليس لديك حساب؟ أنشئ واحداً' : 'لديك حساب بالفعل؟ قم بتسجيل الدخول'}</button></div></div>);};
const Header = ({ cartItemCount, adminNotificationCount, onCartClick, currentUser, onNavigate, onLogout, onAdminNotificationsClick, isAdmin }) => { const [isMenuOpen, setIsMenuOpen] = useState(false); const menuRef = useRef(null); useEffect(() => { const handleClickOutside = (event) => { if (menuRef.current && !menuRef.current.contains(event.target)) { setIsMenuOpen(false); } }; document.addEventListener("mousedown", handleClickOutside); return () => document.removeEventListener("mousedown", handleClickOutside); }, [menuRef]); return (<header className="bg-white/80 backdrop-blur-lg shadow-sm sticky top-0 z-40" style={{backgroundColor: '#FDF5E6'}}><div className="container mx-auto px-4 py-4 flex justify-between items-center"><h1 className="text-3xl font-bold cursor-pointer bg-gradient-to-r from-[#c8b873] to-[#111111] text-transparent bg-clip-text" style={{ textShadow: '1px 1px 2px #00000020' }} onClick={() => onNavigate('home')}>شوب vip Iraq</h1><nav className="hidden md:flex gap-6 items-center text-lg"><a href="#" onClick={(e) => { e.preventDefault(); onNavigate('home'); }} className="text-gray-600 hover:text-black transition-colors">الرئيسية</a><a href="#" onClick={(e) => { e.preventDefault(); onNavigate('home'); }} className="text-gray-600 hover:text-black transition-colors">المنتجات</a></nav><div className="flex items-center gap-5">{isAdmin && (<button onClick={onAdminNotificationsClick} className="relative text-gray-600 hover:text-black transition-colors"><Bell className="w-7 h-7"/>{adminNotificationCount > 0 && <span className="absolute -top-1 -right-2 bg-red-500 text-white text-xs w-5 h-5 rounded-full flex items-center justify-center border-2 border-white">{adminNotificationCount}</span>}</button>)}<button onClick={onCartClick} className="relative text-gray-600 hover:text-black transition-colors"><ShoppingCart className="w-7 h-7"/>{cartItemCount > 0 && <span className="absolute -top-1 -right-2 bg-red-500 text-white text-xs w-5 h-5 rounded-full flex items-center justify-center border-2 border-white">{cartItemCount}</span>}</button><div className="hidden md:block relative" ref={menuRef}>{currentUser ? (<button onClick={() => setIsMenuOpen(!isMenuOpen)} className="flex items-center gap-2 text-gray-600 hover:text-black"><User className="w-7 h-7"/><ChevronDown size={20} className={`transition-transform ${isMenuOpen ? 'rotate-180' : ''}`}/></button>) : (<button onClick={() => onNavigate('account')} className="bg-blue-600 text-white py-2 px-6 rounded-lg font-semibold hover:bg-blue-700 transition-colors">تسجيل الدخول</button>)}{isMenuOpen && currentUser && (<div className="absolute left-0 mt-2 w-48 bg-white rounded-md shadow-xl z-50 py-1"><button onClick={() => { onNavigate('account'); setIsMenuOpen(false); }} className="w-full text-right px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 flex items-center gap-2"><User size={16}/> حسابي</button><button onClick={onLogout} className="w-full text-right px-4 py-2 text-sm text-red-600 hover:bg-gray-100 flex items-center gap-2"><LogOut size={16}/> تسجيل الخروج</button></div>)}</div></div></div></header>);};
const ProductCard = ({ product, onAddToCart, onProductSelect, onToggleFavorite, isFavorite }) => { const isOutOfStock = product.stock === 0; const getStockInfo = () => { if (product.stock === 0) { return <span className="text-red-500 font-semibold">نفدت الكمية</span>; } if (product.stock <= 5) { return <span className="text-orange-500 font-semibold">كمية محدودة: {product.stock}</span>; } return <span className="text-green-600 font-semibold">متوفر</span>; }; return (<div className="bg-white border border-gray-200 rounded-lg shadow-sm overflow-hidden flex flex-col group relative">{isOutOfStock && <div className="absolute inset-0 bg-white/60 flex items-center justify-center z-10"><span className="bg-gray-800 text-white font-bold py-1 px-3 rounded-full text-sm">نفدت الكمية</span></div>}<div className="relative"><div onClick={() => onProductSelect(product)} className="cursor-pointer"><img src={product.images && product.images.length > 0 ? product.images[0] : 'https://placehold.co/400x400/cccccc/ffffff?text=No+Image'} alt={product.name} className="w-full h-40 object-cover" onError={(e) => e.target.src='https://placehold.co/400x400/cccccc/ffffff?text=Error'}/></div><button onClick={(e) => { e.stopPropagation(); onToggleFavorite(product.id); }} className="absolute top-2 right-2 bg-white/70 backdrop-blur-sm p-2 rounded-full text-gray-700 hover:text-red-500 transition-colors duration-200 z-20"><Heart size={20} className={isFavorite ? 'text-red-500' : ''} fill={isFavorite ? 'currentColor' : 'none'} /></button></div><div onClick={() => onProductSelect(product)} className="p-3 flex flex-col flex-grow cursor-pointer"><h3 className="text-sm font-semibold text-gray-800 mb-2 text-right flex-grow leading-tight h-10">{product.name}</h3><div><div className="flex justify-between items-center"><p className="text-md font-bold text-blue-600">{product.price.toLocaleString()} د.ع</p><div className="flex items-center">{[...Array(5)].map((_,i)=><Star key={i} className={`w-4 h-4 ${i<product.rating?'text-yellow-400':'text-gray-300'}`} fill="currentColor"/>)}</div></div><div className="text-xs text-right mt-1 mb-2 h-8 flex flex-col justify-start"><div>{getStockInfo()}</div>{product.pointsEarned > 0 && (<div className="text-green-700 font-semibold">&#127873; +{product.pointsEarned} نقطة</div>)}</div></div></div><div className="p-3 pt-0 mt-auto"><button onClick={(e)=>{e.stopPropagation();onAddToCart(product);}} disabled={isOutOfStock} className="w-full bg-blue-600 text-white py-2 px-4 rounded-lg font-semibold hover:bg-blue-700 transition-colors duration-300 flex items-center justify-center gap-2 disabled:bg-gray-400 disabled:cursor-not-allowed text-sm"><ShoppingCart className="w-4 h-4"/> أضف إلى السلة</button></div></div>);};
const CheckoutPage = ({ cart, onPlaceOrder, currentUser, coupons, deliveryFee }) => { const [form, setForm] = useState({ fullName: currentUser?.fullName || '', phone: currentUser?.phone || '', governorate: '', area: '', address: '' }); const [paymentMethod, setPaymentMethod] = useState('cod'); const [errors, setErrors] = useState({}); const [couponCode, setCouponCode] = useState(''); const [appliedCoupon, setAppliedCoupon] = useState(null); const [pointsToUse, setPointsToUse] = useState(0); const canUsePoints = currentUser.loyaltyPoints >= 100; const subtotal = useMemo(() => cart.reduce((sum, item) => sum + item.price * item.quantity, 0), [cart]); const couponDiscount = useMemo(() => { if (!appliedCoupon) return 0; if (appliedCoupon.type === 'percent') { return (subtotal * appliedCoupon.value) / 100; } return Math.min(appliedCoupon.value, subtotal); }, [appliedCoupon, subtotal]); const totalAfterCoupon = subtotal - couponDiscount; const pointsDiscount = Math.min(pointsToUse * IQD_PER_POINT, totalAfterCoupon); const finalTotal = totalAfterCoupon - pointsDiscount + deliveryFee; const handleApplyCoupon = () => { const coupon = coupons.find(c => c.code.toUpperCase() === couponCode.toUpperCase()); if (coupon) { setAppliedCoupon(coupon); setErrors(prev => ({ ...prev, coupon: '' })); } else { setAppliedCoupon(null); setErrors(prev => ({ ...prev, coupon: 'الكوبون غير صالح.' })); } }; const handlePointsChange = (e) => { const value = parseInt(e.target.value, 10) || 0; setPointsToUse(value); }; const validateForm = () => { const newErrors = {}; if (!form.fullName) newErrors.fullName = "الاسم الكامل مطلوب."; if (!form.phone) newErrors.phone = "رقم الهاتف مطلوب."; else if (!/^(07[5789][0-9]{8})$/.test(form.phone)) newErrors.phone = "صيغة رقم الهاتف غير صحيحة (مثال: 078xxxxxxxx)."; if (!form.governorate) newErrors.governorate = "يرجى اختيار المحافظة."; if (!form.area) newErrors.area = "يرجى اختيار المنطقة."; if (!form.address) newErrors.address = "العنوان التفصيلي مطلوب."; return newErrors; }; const handleInputChange = (e) => { const { id, value } = e.target; setForm(prev => ({ ...prev, [id]: value })); if (id === 'governorate') { setForm(prev => ({ ...prev, area: '' })); } }; const handleSubmit = (e) => { e.preventDefault(); const formErrors = validateForm(); const pointsError = (pointsToUse > 0 && pointsToUse < 100) ? { points: 'يجب استخدام 100 نقطة على الأقل.' } : {}; const allErrors = { ...formErrors, ...pointsError }; if (Object.keys(allErrors).length > 0) { setErrors(allErrors); return; } setErrors({}); const orderDetails = { customer: form, items: cart, subtotal, couponCode: appliedCoupon?.code || '', couponDiscount, pointsUsed: pointsToUse, pointsDiscount, deliveryFee, total: finalTotal, paymentMethod }; onPlaceOrder(orderDetails); }; const areas = form.governorate ? iraqiAreas[form.governorate] : []; return (<div className="container mx-auto px-4 py-8" dir="rtl"><h1 className="text-3xl font-bold text-gray-800 mb-8">إتمام عملية الشراء</h1><div className="grid grid-cols-1 lg:grid-cols-3 gap-8"><div className="lg:col-span-2 bg-white p-8 rounded-lg shadow-md"><form onSubmit={handleSubmit} className="space-y-6"><h2 className="text-2xl font-semibold mb-6 border-b pb-4">معلومات الشحن</h2><div><label htmlFor="fullName" className="block text-sm font-medium text-gray-700 mb-2">الاسم الكامل</label><input type="text" id="fullName" value={form.fullName} onChange={handleInputChange} className={`w-full p-3 border rounded-lg ${errors.fullName ? 'border-red-500' : 'border-gray-300'}`}/>{errors.fullName && <p className="text-red-500 text-xs mt-1">{errors.fullName}</p>}</div><div><label htmlFor="phone" className="block text-sm font-medium text-gray-700 mb-2">رقم الهاتف</label><input type="tel" id="phone" value={form.phone} onChange={handleInputChange} className={`w-full p-3 border rounded-lg ${errors.phone ? 'border-red-500' : 'border-gray-300'}`}/>{errors.phone && <p className="text-red-500 text-xs mt-1">{errors.phone}</p>}</div><div className="grid grid-cols-1 md:grid-cols-2 gap-6"><div><label htmlFor="governorate" className="block text-sm font-medium text-gray-700 mb-2">المحافظة</label><select id="governorate" value={form.governorate} onChange={handleInputChange} className={`w-full p-3 border bg-white rounded-lg ${errors.governorate ? 'border-red-500' : 'border-gray-300'}`}><option value="">اختر محافظة</option>{Object.keys(iraqiAreas).map(gov => <option key={gov} value={gov}>{gov}</option>)}</select>{errors.governorate && <p className="text-red-500 text-xs mt-1">{errors.governorate}</p>}</div><div><label htmlFor="area" className="block text-sm font-medium text-gray-700 mb-2">المنطقة</label><select id="area" value={form.area} onChange={handleInputChange} disabled={!form.governorate} className={`w-full p-3 border bg-white rounded-lg ${errors.area ? 'border-red-500' : 'border-gray-300'}`}><option value="">اختر منطقة</option>{areas.map(area => <option key={area} value={area}>{area}</option>)}</select>{errors.area && <p className="text-red-500 text-xs mt-1">{errors.area}</p>}</div></div><div><label htmlFor="address" className="block text-sm font-medium text-gray-700 mb-2">العنوان التفصيلي (أقرب نقطة دالة)</label><input type="text" id="address" value={form.address} onChange={handleInputChange} className={`w-full p-3 border rounded-lg ${errors.address ? 'border-red-500' : 'border-gray-300'}`}/>{errors.address && <p className="text-red-500 text-xs mt-1">{errors.address}</p>}</div><h2 className="text-2xl font-semibold mb-4 pt-6 border-t mt-6">الخصومات وبرنامج الولاء</h2><div><label htmlFor="coupon" className="block text-sm font-medium text-gray-700 mb-2">كوبون الخصم</label><div className="flex gap-2"><input type="text" id="coupon" value={couponCode} onChange={(e) => setCouponCode(e.target.value.toUpperCase())} className="w-full p-3 border border-gray-300 rounded-lg" placeholder="أدخل الكوبون هنا" /><button type="button" onClick={handleApplyCoupon} className="bg-gray-800 text-white px-6 rounded-lg font-semibold hover:bg-black">تطبيق</button></div>{errors.coupon && <p className="text-red-500 text-xs mt-1">{errors.coupon}</p>} {appliedCoupon && <p className="text-green-600 text-xs mt-1">تم تطبيق الكوبون بنجاح!</p>}</div><div className={`bg-yellow-50 p-4 rounded-lg ${!canUsePoints ? 'opacity-50 cursor-not-allowed' : ''}`}><label htmlFor="points" className="block text-sm font-medium text-gray-700 mb-2">استخدام نقاط الولاء (لديك {currentUser.loyaltyPoints} نقطة){!canUsePoints && <span className="text-xs text-red-500"> - تحتاج 100 نقطة على الأقل لاستخدامها</span>}</label><div className="flex items-center gap-2"><input type="range" min="0" max={currentUser.loyaltyPoints} value={pointsToUse} onChange={handlePointsChange} className="w-full" disabled={!canUsePoints} step="10" /><span className="font-bold text-yellow-800">{pointsToUse}</span></div>{errors.points && <p className="text-red-500 text-xs mt-1">{errors.points}</p>}{pointsDiscount > 0 && <p className="text-sm text-green-600 mt-2">خصم بقيمة {pointsDiscount.toLocaleString()} د.ع باستخدام نقاطك.</p>}</div><h2 className="text-2xl font-semibold mb-4 pt-6 border-t mt-6">طريقة الدفع</h2><div className="space-y-4">{[ { id: 'cod', label: 'الدفع عند الاستلام', icon: <Truck size={24} /> }, { id: 'zaincash', label: 'زين كاش', icon: <img src="https://placehold.co/100x40/de2127/ffffff?text=ZainCash" alt="ZainCash Logo" className="h-6 object-contain"/> }, { id: 'asiahawala', label: 'آسيا حوالة', icon: <img src="https://placehold.co/100x40/007335/ffffff?text=AsiaHawala" alt="AsiaHawala Logo" className="h-6 object-contain"/> }].map(option => (<label key={option.id} className={`flex items-center gap-4 p-4 border rounded-lg cursor-pointer transition-all ${paymentMethod === option.id ? 'border-blue-500 ring-2 ring-blue-500' : 'border-gray-300'}`}><input type="radio" name="paymentMethod" value={option.id} checked={paymentMethod === option.id} onChange={() => setPaymentMethod(option.id)} className="w-5 h-5 text-blue-600 focus:ring-blue-500"/><span className="flex-grow font-semibold">{option.label}</span><div className="flex-shrink-0">{option.icon}</div></label>))}</div><div className="pt-6 border-t mt-8"><button type="submit" className="w-full bg-green-600 text-white py-4 px-6 rounded-lg font-bold text-lg hover:bg-green-700 transition-colors">تأكيد الطلب</button></div></form></div><div className="lg:col-span-1"><div className="bg-white p-6 rounded-lg shadow-md sticky top-28"><h3 className="text-xl font-semibold mb-4 border-b pb-3">ملخص الطلب</h3><div className="space-y-3 mb-4 max-h-64 overflow-y-auto">{cart.map(item => (<div key={item.id} className="flex justify-between items-center text-sm"><span className="font-medium">{item.name} <span className="text-gray-500">x{item.quantity}</span></span><span className="font-semibold">{(item.price * item.quantity).toLocaleString()} د.ع</span></div>))}</div><div className="border-t pt-4 space-y-2 text-sm"><div className="flex justify-between font-semibold"><span>المجموع الفرعي</span><span>{subtotal.toLocaleString()} د.ع</span></div>{couponDiscount > 0 && (<div className="flex justify-between text-green-600"><span>خصم الكوبون</span><span>- {couponDiscount.toLocaleString()} د.ع</span></div>)}{pointsDiscount > 0 && (<div className="flex justify-between text-green-600"><span>خصم النقاط</span><span>- {pointsDiscount.toLocaleString()} د.ع</span></div>)}<div className="flex justify-between"><span>سعر التوصيل</span><span>{deliveryFee.toLocaleString()} د.ع</span></div><div className="flex justify-between font-bold text-xl text-blue-600 pt-2 border-t mt-2"><span>الإجمالي النهائي</span><span>{finalTotal.toLocaleString()} د.ع</span></div></div></div></div></div></div>);};
const AccountPage = ({ currentUser, onLogin, onLogout, fromCheckout, onNavigate }) => { if (!currentUser) { return <LoginPage onLogin={onLogin} fromCheckout={fromCheckout} />; } return (<div className="container mx-auto px-4 py-8"><div className="max-w-md mx-auto bg-white p-8 rounded-xl shadow-lg text-center"><User size={64} className="mx-auto text-gray-400"/><h1 className="text-2xl font-bold mt-4">مرحباً بك، {currentUser.fullName || currentUser.email}</h1><p className="text-gray-600 mt-2">{currentUser.email}</p><div className="mt-8 bg-yellow-100 border-t-4 border-yellow-400 rounded-b text-yellow-900 px-4 py-3 shadow-md" role="alert"><div className="flex items-center justify-center"><Gift size={24} className="text-yellow-700"/><div className="ml-3"><p className="font-bold">رصيد نقاط الولاء</p><p className="text-lg">{currentUser.loyaltyPoints} نقطة</p></div></div></div><button onClick={() => onNavigate('editProfile')} className="w-full bg-blue-600 text-white py-3 mt-8 rounded-lg font-semibold hover:bg-blue-700 flex items-center justify-center gap-2"><Edit size={20}/> تعديل الملف الشخصي</button><button onClick={onLogout} className="w-full bg-red-500 text-white py-3 mt-4 rounded-lg font-semibold hover:bg-red-600 flex items-center justify-center gap-2"><LogOut size={20}/> تسجيل الخروج</button></div></div>);};
const EditProfilePage = ({ currentUser, onUpdateProfile, onNavigate }) => { const [form, setForm] = useState({ fullName: currentUser.fullName || '', phone: currentUser.phone || '', currentPassword: '', newPassword: '', confirmPassword: '' }); const [errors, setErrors] = useState({}); const [successMessage, setSuccessMessage] = useState(''); const handleChange = (e) => { const { id, value } = e.target; setForm(prev => ({ ...prev, [id]: value })); }; const validate = () => { const newErrors = {}; if (!form.fullName) newErrors.fullName = "الاسم الكامل مطلوب."; if (form.phone && !/^(07[5789][0-9]{8})$/.test(form.phone)) newErrors.phone = "صيغة رقم الهاتف غير صحيحة."; if (form.newPassword && form.newPassword.length < 6) newErrors.newPassword = "كلمة المرور الجديدة يجب أن تكون 6 أحرف على الأقل."; if (form.newPassword !== form.confirmPassword) newErrors.confirmPassword = "كلمتا المرور غير متطابقتين."; setErrors(newErrors); return Object.keys(newErrors).length === 0; }; const handleSubmit = (e) => { e.preventDefault(); setSuccessMessage(''); if (!validate()) return; onUpdateProfile(form); setSuccessMessage('تم تحديث ملفك الشخصي بنجاح!'); setTimeout(() => { setSuccessMessage(''); onNavigate('account'); }, 2000); }; return (<div className="container mx-auto px-4 py-8"><div className="max-w-2xl mx-auto bg-white p-8 rounded-xl shadow-lg" dir="rtl"><h1 className="text-3xl font-bold text-gray-800 mb-8 text-center">تعديل الملف الشخصي</h1>{successMessage && <div className="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded relative mb-6" role="alert">{successMessage}</div>}<form onSubmit={handleSubmit} className="space-y-6"><h2 className="text-xl font-semibold mb-4 text-gray-700">المعلومات الشخصية</h2><div><label htmlFor="fullName" className="block text-sm font-medium text-gray-700 mb-2">الاسم الكامل</label><input type="text" id="fullName" value={form.fullName} onChange={handleChange} className={`w-full p-3 border rounded-lg ${errors.fullName ? 'border-red-500' : 'border-gray-300'}`}/>{errors.fullName && <p className="text-red-500 text-xs mt-1">{errors.fullName}</p>}</div><div className="mt-4"><label htmlFor="phone" className="block text-sm font-medium text-gray-700 mb-2">رقم الهاتف</label><input type="tel" id="phone" value={form.phone} onChange={handleChange} className={`w-full p-3 border rounded-lg ${errors.phone ? 'border-red-500' : 'border-gray-300'}`}/>{errors.phone && <p className="text-red-500 text-xs mt-1">{errors.phone}</p>}</div><div className="border-t pt-6 mt-6"><h2 className="text-xl font-semibold mb-4 text-gray-700 flex items-center gap-2"><KeyRound size={20}/> تغيير كلمة المرور (اختياري)</h2><div><label htmlFor="currentPassword" className="block text-sm font-medium text-gray-700 mb-2">كلمة المرور الحالية</label><input type="password" id="currentPassword" value={form.currentPassword} onChange={handleChange} className="w-full p-3 border border-gray-300 rounded-lg"/></div><div className="mt-4"><label htmlFor="newPassword" className="block text-sm font-medium text-gray-700 mb-2">كلمة المرور الجديدة</label><input type="password" id="newPassword" value={form.newPassword} onChange={handleChange} className={`w-full p-3 border rounded-lg ${errors.newPassword ? 'border-red-500' : 'border-gray-300'}`}/>{errors.newPassword && <p className="text-red-500 text-xs mt-1">{errors.newPassword}</p>}</div><div className="mt-4"><label htmlFor="confirmPassword" className="block text-sm font-medium text-gray-700 mb-2">تأكيد كلمة المرور الجديدة</label><input type="password" id="confirmPassword" value={form.confirmPassword} onChange={handleChange} className={`w-full p-3 border rounded-lg ${errors.confirmPassword ? 'border-red-500' : 'border-gray-300'}`}/>{errors.confirmPassword && <p className="text-red-500 text-xs mt-1">{errors.confirmPassword}</p>}</div></div><div className="flex justify-end gap-4 pt-6 border-t"><button type="button" onClick={() => onNavigate('account')} className="bg-gray-200 text-gray-800 py-2 px-6 rounded-lg font-semibold hover:bg-gray-300">إلغاء</button><button type="submit" className="bg-green-600 text-white py-2 px-6 rounded-lg font-semibold hover:bg-green-700">حفظ التغييرات</button></div></form></div></div>);};
const OrderConfirmationPage = ({ onNavigate }) => (<div className="container mx-auto px-4 py-16 text-center"><CheckCircle className="mx-auto text-green-500" size={80}/><h1 className="mt-6 text-4xl font-bold text-gray-800">شكرًا لك!</h1><p className="mt-3 text-lg text-gray-600">لقد تم استلام طلبك بنجاح وسنتواصل معك قريبًا.</p><div className="mt-8 flex justify-center gap-4"><button onClick={() => onNavigate('home')} className="bg-blue-600 text-white py-3 px-8 rounded-lg font-semibold hover:bg-blue-700 transition-colors">متابعة التسوق</button></div></div>);
const FavoritesPage = ({ favorites, onAddToCart, onProductSelect, onToggleFavorite }) => (<div className="container mx-auto px-4 py-8"><h1 className="text-3xl font-bold text-gray-800 mb-8">المفضلة</h1>{favorites.length === 0 ? (<div className="text-center py-16"><Heart className="mx-auto text-gray-300" size={64}/><h3 className="mt-4 text-2xl font-semibold text-gray-700">قائمة المفضلة فارغة</h3><p className="mt-2 text-gray-500">أضف المنتجات التي تعجبك بالضغط على أيقونة القلب.</p></div>) : (<div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">{favorites.map(product => (<ProductCard key={product.id} product={product} onAddToCart={onAddToCart} onProductSelect={onProductSelect} onToggleFavorite={onToggleFavorite} isFavorite={true}/>))}</div>)}</div>);
const OrdersPage = ({ orders }) => (<div className="container mx-auto px-4 py-8"><h1 className="text-3xl font-bold text-gray-800 mb-8">طلباتي</h1>{orders.length === 0 ? (<div className="text-center py-16 bg-white rounded-lg shadow-sm"><Package className="mx-auto text-gray-300" size={64}/><h3 className="mt-4 text-2xl font-semibold text-gray-700">لا توجد طلبات حالية</h3><p className="mt-2 text-gray-500">عندما تقوم بطلب، ستجده هنا.</p></div>) : (<div className="bg-white p-6 rounded-lg shadow-md"><div className="overflow-x-auto"><table className="min-w-full bg-white text-right"><thead className="bg-gray-100"><tr><th className="py-3 px-4">رقم الطلب</th><th className="py-3 px-4">التاريخ</th><th className="py-3 px-4">الإجمالي</th><th className="py-3 px-4">الحالة</th></tr></thead><tbody>{orders.map(order => (<tr key={order.id} className="border-b"><td className="py-3 px-4 font-mono text-sm">#{order.id.toString().slice(-6)}</td><td className="py-3 px-4 text-sm text-gray-600">{new Date(order.date).toLocaleDateString('ar-IQ')}</td><td className="py-3 px-4">{order.total.toLocaleString()} د.ع</td><td className="py-3 px-4"><span className={`px-2 py-1 text-xs font-semibold rounded-full ${orderStatuses[order.status].color}`}>{orderStatuses[order.status].text}</span></td></tr>))}</tbody></table></div></div>)}</div>);
const ShoppingCartSidebar = ({ cart, isOpen, onClose, onUpdateQuantity, onRemoveFromCart, onNavigate }) => {if(!isOpen)return null;const total=cart.reduce((sum,item)=>sum+item.price*item.quantity,0);return(<div className="fixed inset-0 bg-black bg-opacity-50 z-[100]" onClick={onClose}><div className="fixed top-0 left-0 h-full w-full max-w-md bg-white shadow-xl flex flex-col" onClick={e=>e.stopPropagation()} dir="rtl"><div className="flex justify-between items-center p-4 border-b"><h2 className="text-2xl font-bold">سلة التسوق</h2><button onClick={onClose} className="text-gray-500 hover:text-gray-800"><X size={28}/></button></div>{cart.length===0?(<div className="flex-grow flex flex-col items-center justify-center text-center p-4"><ShoppingCart size={64} className="text-gray-300 mb-4"/><h3 className="text-xl font-semibold text-gray-700">سلتك فارغة</h3><p className="text-gray-500 mt-2">أضف بعض المنتجات لتبدأ التسوق!</p></div>):(<div className="flex-grow overflow-y-auto p-4">{cart.map(item=>(<div key={item.id} className="flex items-center gap-4 mb-4 pb-4 border-b last:border-b-0"><img src={item.images[0]} alt={item.name} className="w-20 h-20 rounded-md object-cover"/><div className="flex-grow"><h4 className="font-semibold">{item.name}</h4><p className="text-gray-600">{item.price.toLocaleString()} د.ع</p><div className="flex items-center gap-2 mt-2"><button onClick={()=>onUpdateQuantity(item.id,item.quantity-1)} className="p-1 border rounded-md hover:bg-gray-100"><Minus size={16}/></button><span>{item.quantity}</span><button onClick={()=>onUpdateQuantity(item.id,item.quantity+1)} className="p-1 border rounded-md hover:bg-gray-100"><Plus size={16}/></button></div></div><button onClick={()=>onRemoveFromCart(item.id)} className="text-red-500 hover:text-red-700"><X size={20}/></button></div>))}</div>)}<div className="p-4 border-t mt-auto"><div className="flex justify-between items-center text-xl font-bold mb-4"><span>الإجمالي:</span><span>{total.toLocaleString()} د.ع</span></div><button onClick={() => { onClose(); onNavigate('checkout'); }} className="w-full bg-green-600 text-white py-3 px-4 rounded-lg font-semibold hover:bg-green-700 transition-colors duration-300 disabled:bg-gray-400" disabled={cart.length===0}>إتمام عملية الشراء</button></div></div></div>);};
const ProductDetailPage=({product,onBack,onAddToCart,onToggleFavorite,isFavorite})=>{ const [selectedImageIndex, setSelectedImageIndex] = useState(0); if (!product.images || product.images.length === 0) { product.images = ['https://placehold.co/600x600/cccccc/ffffff?text=No+Image']; } return (<div className="container mx-auto px-4 py-8"><button onClick={onBack} className="flex items-center gap-2 text-blue-600 hover:text-blue-800 font-semibold mb-6"><ArrowRight size={20}/> العودة إلى كل المنتجات</button><div className="grid grid-cols-1 md:grid-cols-2 gap-8 lg:gap-12"><div><div className="bg-white p-4 border rounded-lg flex items-center justify-center relative aspect-square mb-4"><img src={product.images[selectedImageIndex]} alt={`${product.name} - ${selectedImageIndex + 1}`} className="w-full max-w-md h-auto object-contain rounded-lg"/><button onClick={(e)=>{e.stopPropagation();onToggleFavorite(product.id);}} className="absolute top-5 right-5 bg-white/70 backdrop-blur-sm p-3 rounded-full text-gray-700 hover:text-red-500 transition-colors duration-200"><Heart size={24} className={isFavorite?'text-red-500':''} fill={isFavorite?'currentColor':'none'}/></button></div><div className="flex justify-center gap-2">{product.images.map((img, index) => (<button key={index} onClick={() => setSelectedImageIndex(index)} className={`w-20 h-20 rounded-md overflow-hidden border-2 ${selectedImageIndex === index ? 'border-blue-500' : 'border-transparent'}`}><img src={img} alt={`Thumbnail ${index + 1}`} className="w-full h-full object-cover" /></button>))}</div></div><div className="flex flex-col justify-center"><h1 className="text-4xl font-bold text-gray-900 mb-4">{product.name}</h1><div className="flex items-center mb-4"><div className="flex items-center">{[...Array(5)].map((_,i)=>(<Star key={i} className={`w-6 h-6 ${i<product.rating?'text-yellow-400':'text-gray-300'}`} fill="currentColor"/>))}<span className="text-gray-600 mr-3">({product.rating}.0)</span></div></div><div className="text-4xl font-extrabold text-blue-600 mb-2">{product.price.toLocaleString()} د.ع</div>{product.pointsEarned > 0 && (<div className="mb-4 bg-yellow-100 text-yellow-800 text-sm font-semibold p-2 rounded-lg inline-flex items-center gap-2"><Gift size={16} /><span>عند شرائك لهذا المنتج ستحصل على {product.pointsEarned} نقطة ولاء!</span></div>)}<p className="text-gray-700 text-lg leading-relaxed mb-6">{product.description}</p><button onClick={()=>onAddToCart(product)} disabled={product.stock === 0} className="w-full max-w-sm bg-blue-600 text-white py-3 px-6 rounded-lg font-bold text-lg hover:bg-blue-700 transition-colors duration-300 flex items-center justify-center gap-3 disabled:bg-gray-400 disabled:cursor-not-allowed"><ShoppingCart className="w-6 h-6"/>{product.stock > 0 ? 'أضف إلى السلة' : 'نفذت الكمية'}</button></div></div></div>);};
const Footer=()=>(<footer className="bg-gray-800 text-white mt-12"><div className="container mx-auto px-4 py-6 text-center"><p>&copy; {new Date().getFullYear()} شوب vip Iraq. كل الحقوق محفوظة.</p></div></footer>);
const ProductList = ({ products, onAddToCart, onProductSelect, onToggleFavorite, favoritesList }) => { if (products.length === 0) { return <div className="text-center py-16"><Frown className="mx-auto text-gray-400" size={64}/><h3 className="mt-4 text-2xl font-semibold text-gray-700">لا توجد منتجات مطابقة</h3><p className="mt-2 text-gray-500">حاول تغيير فئة البحث أو مصطلح البحث.</p></div>; } return (<div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-4">{products.map(product => (<ProductCard key={product.id} product={product} onAddToCart={onAddToCart} onProductSelect={onProductSelect} onToggleFavorite={onToggleFavorite} isFavorite={favoritesList.some(p => p.id === product.id)}/>))}</div>);};
const BottomNavBar = ({ activePage, onNavigate, isAdmin }) => { const navItems = [ { id: 'home', label: 'الرئيسية', icon: Home, admin: false }, { id: 'favorites', label: 'المفضلة', icon: Heart, admin: false }, { id: 'orders', label: 'طلباتي', icon: Package, admin: false }, { id: 'admin', label: 'المدير', icon: Shield, admin: true }, { id: 'account', label: 'حسابي', icon: User, admin: false }, ]; return (<div className="fixed bottom-0 left-0 right-0 bg-white shadow-[0_-2px_10px_rgba(0,0,0,0.1)] md:hidden z-50"><div className="flex justify-around"><nav className="flex justify-around w-full">{navItems.map(item => { if (item.admin && !isAdmin) return null; return (<button key={item.id} onClick={() => onNavigate(item.id)} className={`flex flex-col items-center justify-center text-center w-full pt-2 pb-1 transition-colors ${activePage === item.id ? 'text-blue-600' : 'text-gray-500 hover:text-blue-600'}`}><item.icon size={24}/><span className="text-xs mt-1">{item.label}</span></button>);})}</nav></div></div>);};
const SearchBar = ({ onSearchChange }) => ( <div className="container mx-auto px-4 pt-8"> <div className="relative"> <input type="text" placeholder="...ابحث عن منتج" className="w-full p-4 pr-12 border-2 border-gray-200 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition text-lg" onChange={(e) => onSearchChange(e.target.value)} /> <Search className="absolute top-1/2 right-4 -translate-y-1/2 text-gray-400" size={24}/> </div> </div> );
const CategoryBar = ({ onCategoryChange, activeCategory, categories }) => ( <div className="container mx-auto px-4 pt-4 pb-8"> <div className="flex items-center justify-center gap-2 flex-wrap"> {categories.map(category => ( <button key={category} onClick={() => onCategoryChange(category)} className={`px-5 py-2 rounded-full font-semibold transition-colors text-sm sm:text-base ${activeCategory === category ? 'bg-blue-600 text-white shadow-md' : 'bg-white text-gray-700 hover:bg-gray-200 border'}`} > {category} </button> ))} </div> </div> );
const AdminNotificationsPanel = ({ notifications, onClear, onClose }) => { const panelRef = useRef(null); useEffect(() => { const handleClickOutside = (event) => { if (panelRef.current && !panelRef.current.contains(event.target)) { onClose(); } }; document.addEventListener("mousedown", handleClickOutside); return () => document.removeEventListener("mousedown", handleClickOutside); }, [onClose]); return (<div ref={panelRef} className="absolute top-16 left-4 sm:left-auto sm:right-24 mt-2 w-80 bg-white rounded-lg shadow-xl z-50 border" dir="rtl"><div className="p-4 border-b flex justify-between items-center"><h3 className="font-semibold">الإشعارات</h3>{notifications.length > 0 && <button onClick={onClear} className="text-xs text-blue-600 hover:underline">مسح الكل</button>}</div><div className="max-h-96 overflow-y-auto">{notifications.length === 0 ? (<p className="text-center text-gray-500 p-8">لا توجد إشعارات جديدة.</p>) : (notifications.map(notif => (<div key={notif.id} className="p-4 border-b last:border-b-0 hover:bg-gray-50"><p className="font-semibold text-sm">{notif.message}</p><p className="text-xs text-gray-600">{notif.details}</p><p className="text-xs text-gray-400 mt-1">{new Date(notif.date).toLocaleString('ar-IQ')}</p></div>)))}</div></div>);};
const StockAdjustmentModal = ({ product, onClose, onUpdateStock }) => { const [amount, setAmount] = useState(1); const [error, setError] = useState(''); const handleAdjust = (adjustment) => { const numAmount = parseInt(amount, 10); if (isNaN(numAmount) || numAmount <= 0) { setError('الرجاء إدخال كمية صحيحة.'); return; } if (adjustment < 0 && numAmount > product.stock) { setError('لا يمكن إنقاص كمية أكبر من المخزون الحالي.'); return; } setError(''); onUpdateStock(product.id, adjustment * numAmount); onClose(); }; return (<div className="fixed inset-0 bg-black bg-opacity-50 z-[100] flex items-center justify-center p-4" dir="rtl"><div className="bg-white rounded-lg shadow-xl w-full max-w-sm"><div className="p-6"><div className="flex justify-between items-center mb-4"><h3 className="text-lg font-bold">تعديل المخزون</h3><button onClick={onClose} className="text-gray-400 hover:text-gray-600"><X size={24} /></button></div><div className="mb-4"><p className="font-semibold text-gray-800">{product.name}</p><p className="text-sm text-gray-500">الكمية الحالية: <span className="font-bold">{product.stock}</span></p></div><div className="space-y-4"><div><label htmlFor="adjustmentAmount" className="block text-sm font-medium text-gray-700 mb-1">الكمية</label><input id="adjustmentAmount" type="number" value={amount} onChange={(e) => setAmount(e.target.value)} min="1" className="w-full p-2 border border-gray-300 rounded-lg text-center"/></div>{error && <div className="flex items-center gap-2 text-sm text-red-600"><AlertCircle size={16} /><span>{error}</span></div>}<div className="flex gap-4"><button onClick={() => handleAdjust(1)} className="flex-1 bg-green-500 text-white py-2 rounded-lg font-semibold hover:bg-green-600">إضافة كمية</button><button onClick={() => handleAdjust(-1)} className="flex-1 bg-red-500 text-white py-2 rounded-lg font-semibold hover:bg-red-600">إنقاص كمية</button></div></div></div></div></div>);};
const ProductForm = ({ product, onSave, onClose }) => { const [formData, setFormData] = useState({ id: product?.id || null, name: product?.name || '', price: product?.price || '', stock: product?.stock || 0, category: product?.category || 'إلكترونيات', description: product?.description || '', images: product?.images || [], featured: product?.featured || false, pointsEarned: product?.pointsEarned || 0, }); const [imagePreviews, setImagePreviews] = useState(product?.images || []); const handleFileChange = (e) => { const files = Array.from(e.target.files); if (files.length > 0) { const newFiles = [...formData.images, ...files]; const newPreviews = [...imagePreviews, ...files.map(file => URL.createObjectURL(file))]; setFormData(prev => ({ ...prev, images: newFiles })); setImagePreviews(newPreviews); } }; const removeImage = (index) => { const newFiles = formData.images.filter((_, i) => i !== index); const newPreviews = imagePreviews.filter((_, i) => i !== index); const removedPreview = imagePreviews[index]; if (removedPreview && removedPreview.startsWith('blob:')) { URL.revokeObjectURL(removedPreview); } setFormData(prev => ({ ...prev, images: newFiles })); setImagePreviews(newPreviews); }; const handleChange = (e) => { const { name, value, type, checked } = e.target; setFormData(prev => ({ ...prev, [name]: type === 'checkbox' ? checked : (type === 'number' ? parseInt(value) : value) })); }; const handleSubmit = (e) => { e.preventDefault(); onSave(formData); }; useEffect(() => { return () => { imagePreviews.forEach(preview => { if (preview && preview.startsWith('blob:')) { URL.revokeObjectURL(preview); } }); }; }, [imagePreviews]); return (<div className="fixed inset-0 bg-black bg-opacity-50 z-[100] flex items-center justify-center p-4" dir="rtl"><div className="bg-white rounded-lg shadow-xl w-full max-w-4xl max-h-full overflow-y-auto"><form onSubmit={handleSubmit} className="p-8 space-y-6"><h2 className="text-2xl font-bold text-center mb-6">{product ? 'تعديل المنتج' : 'إضافة منتج جديد'}</h2><div className="grid grid-cols-1 md:grid-cols-2 gap-x-8 gap-y-6"><div><label className="block text-sm font-medium text-gray-700 mb-2">اسم المنتج</label><input type="text" name="name" value={formData.name} onChange={handleChange} className="w-full p-3 border border-gray-300 rounded-lg" required /></div><div><label className="block text-sm font-medium text-gray-700 mb-2">السعر (د.ع)</label><input type="number" name="price" value={formData.price} onChange={handleChange} className="w-full p-3 border border-gray-300 rounded-lg" required /></div><div><label className="block text-sm font-medium text-gray-700 mb-2">الكمية المتوفرة</label><input type="number" name="stock" value={formData.stock} onChange={handleChange} className="w-full p-3 border border-gray-300 rounded-lg" required /></div><div><label className="block text-sm font-medium text-gray-700 mb-2">التصنيف</label><select name="category" value={formData.category} onChange={handleChange} className="w-full p-3 border bg-white border-gray-300 rounded-lg">{categories.filter(c => c !== 'الكل').map(cat => <option key={cat} value={cat}>{cat}</option>)}</select></div><div className="col-span-1 md:col-span-2"><label className="block text-sm font-medium text-gray-700 mb-2">النقاط المكتسبة عند الشراء</label><input type="number" name="pointsEarned" value={formData.pointsEarned} onChange={handleChange} className="w-full p-3 border border-gray-300 rounded-lg" min="0" /></div></div><div className="col-span-1 md:col-span-2"><label className="block text-sm font-medium text-gray-700 mb-2">الوصف</label><textarea name="description" value={formData.description} onChange={handleChange} rows="4" className="w-full p-3 border border-gray-300 rounded-lg"></textarea></div><div className="col-span-1 md:col-span-2"><label className="block text-sm font-medium text-gray-700 mb-2">صور المنتج</label><div className="mt-2 p-4 border-2 border-dashed border-gray-300 rounded-lg"><div className="grid grid-cols-4 sm:grid-cols-6 md:grid-cols-8 gap-4 mb-4">{imagePreviews.map((preview, index) => (<div key={index} className="relative aspect-square"><img src={preview} alt={`Preview ${index + 1}`} className="w-full h-full object-cover rounded-md" /><button type="button" onClick={() => removeImage(index)} className="absolute -top-2 -right-2 bg-red-500 text-white rounded-full p-1 leading-none"><X size={14} /></button></div>))}</div><label htmlFor="image-upload" className="cursor-pointer bg-blue-50 text-blue-700 font-semibold py-2 px-4 rounded-lg hover:bg-blue-100 w-full text-center block">اختر صور...</label><input id="image-upload" type="file" name="images" onChange={handleFileChange} accept="image/*" className="hidden" multiple /></div></div><div className="col-span-1 md:col-span-2 flex items-center gap-4"><input type="checkbox" name="featured" id="featured" checked={formData.featured} onChange={handleChange} className="h-5 w-5 text-blue-600 rounded" /><label htmlFor="featured" className="font-medium text-gray-700">عرض كمنتج مميز</label></div><div className="flex justify-end gap-4 pt-6 border-t mt-4"><button type="button" onClick={onClose} className="bg-gray-200 text-gray-800 py-2 px-6 rounded-lg font-semibold hover:bg-gray-300">إلغاء</button><button type="submit" className="bg-green-600 text-white py-2 px-6 rounded-lg font-semibold hover:bg-green-700">حفظ</button></div></form></div></div>);};
const AdminProductManagement = ({ products, onAddProduct, onUpdateProduct, onDeleteProduct, onUpdateStock }) => { const [isFormOpen, setIsFormOpen] = useState(false); const [editingProduct, setEditingProduct] = useState(null); const [isStockModalOpen, setIsStockModalOpen] = useState(false); const [selectedProductForStock, setSelectedProductForStock] = useState(null); const handleEdit = (product) => { setEditingProduct(product); setIsFormOpen(true); }; const handleAddNew = () => { setEditingProduct(null); setIsFormOpen(true); }; const handleSave = (productData) => { if (editingProduct) { onUpdateProduct(productData); } else { onAddProduct(productData); } setIsFormOpen(false); setEditingProduct(null); }; const openStockModal = (product) => { setSelectedProductForStock(product); setIsStockModalOpen(true); }; return (<div className="bg-white p-4 sm:p-6 rounded-lg shadow-md"><div className="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-6 gap-4"><h2 className="text-2xl font-semibold">إدارة المنتجات</h2><button onClick={handleAddNew} className="bg-blue-600 text-white py-2 px-4 rounded-lg font-semibold hover:bg-blue-700 flex items-center gap-2 w-full sm:w-auto justify-center"><PlusCircle size={20}/> إضافة منتج</button></div><div className="overflow-x-auto"><table className="min-w-full bg-white text-right"><thead className="bg-gray-50 text-sm text-gray-600 uppercase"><tr><th className="py-3 px-4">المنتج</th><th className="py-3 px-4">السعر</th><th className="py-3 px-4">الكمية</th><th className="py-3 px-4">إجراءات</th></tr></thead><tbody className="text-gray-700">{products.map(product => (<tr key={product.id} className="border-b hover:bg-gray-50"><td className="py-4 px-4 flex items-center gap-3"><img src={product.images[0]} alt={product.name} className="w-12 h-12 rounded-md object-cover flex-shrink-0"/><span className="font-medium text-sm">{product.name}</span></td><td className="py-4 px-4 text-sm">{product.price.toLocaleString()} د.ع</td><td className="py-4 px-4 text-sm"><div className="flex items-center gap-2">{product.stock > 0 ? product.stock : <span className="text-red-500 font-semibold">نفدت</span>}<button onClick={() => openStockModal(product)} className="text-gray-400 hover:text-blue-600"><PlusCircle size={16} /></button></div></td><td className="py-4 px-4"><div className="flex gap-1"><button onClick={() => handleEdit(product)} className="text-blue-500 hover:text-blue-700 p-2"><Edit size={18} /></button><button onClick={() => onDeleteProduct(product.id)} className="text-red-500 hover:text-red-700 p-2"><Trash2 size={18} /></button></div></td></tr>))}</tbody></table></div>{isFormOpen && <ProductForm product={editingProduct} onSave={handleSave} onClose={() => setIsFormOpen(false)} />}{isStockModalOpen && <StockAdjustmentModal product={selectedProductForStock} onClose={() => setIsStockModalOpen(false)} onUpdateStock={onUpdateStock} />}</div>);};
const AdminOrderManagement = ({ orders, onUpdateOrderStatus }) => { const newOrdersCount = orders.filter(order => order.status === 'pending').length; if (orders.length === 0) { return (<div className="bg-white p-4 sm:p-6 rounded-lg shadow-md"><h2 className="text-2xl font-semibold mb-6">قائمة الطلبات</h2><div className="text-center py-16"><Package size={64} className="mx-auto text-gray-300" /><h3 className="mt-4 text-2xl font-semibold text-gray-700">لا توجد طلبات حالية</h3></div></div>); } return (<div className="bg-white p-4 sm:p-6 rounded-lg shadow-md"><div className="flex items-center gap-4 mb-6"><h2 className="text-2xl font-semibold">قائمة الطلبات</h2>{newOrdersCount > 0 && <span className="bg-red-500 text-white text-sm font-bold w-6 h-6 rounded-full flex items-center justify-center">{newOrdersCount}</span>}</div><div className="space-y-6">{orders.map(order => (<div key={order.id} className="border border-gray-200 rounded-lg p-4 space-y-4 hover:shadow-lg transition-shadow"><div className="flex flex-col sm:flex-row justify-between sm:items-center gap-2 pb-4 border-b"><div><span className="font-bold text-lg text-gray-800">طلب #{order.id.toString().slice(-6)}</span><span className="text-sm text-gray-500 mr-2">({new Date(order.date).toLocaleDateString('ar-IQ')})</span></div><div className="font-bold text-xl text-blue-600">{order.total.toLocaleString()} د.ع</div></div><div className="grid grid-cols-1 md:grid-cols-2 gap-x-6 gap-y-4"><div><h4 className="font-semibold text-gray-700 mb-2">معلومات الزبون:</h4><p className="text-sm"><strong>الاسم:</strong> {order.customer.fullName}</p><p className="text-sm"><strong>الهاتف:</strong> {order.customer.phone}</p><p className="text-sm"><strong>العنوان:</strong> {`${order.customer.governorate}, ${order.customer.area}, ${order.customer.address}`}</p></div><div><h4 className="font-semibold text-gray-700 mb-2">المنتجات:</h4><ul className="list-disc list-inside space-y-1">{order.items.map(item => (<li key={item.id} className="text-sm text-gray-600">{item.name} <span className="font-semibold">x{item.quantity}</span></li>))}</ul></div></div><div className="grid grid-cols-1 md:grid-cols-2 gap-x-6 gap-y-4 pt-4 border-t"><div><h4 className="font-semibold text-gray-700 mb-2">التفاصيل المالية:</h4><div className="text-sm space-y-1"><div className="flex justify-between"><span>المجموع الفرعي:</span> <span>{order.subtotal.toLocaleString()} د.ع</span></div>{(order.couponDiscount > 0 || order.pointsDiscount > 0) &&<div className="flex justify-between text-red-600"><span>الخصم:</span><span>- {(order.couponDiscount + order.pointsDiscount).toLocaleString()} د.ع</span></div>}<div className="flex justify-between"><span>التوصيل:</span> <span>{order.deliveryFee.toLocaleString()} د.ع</span></div><div className="flex justify-between font-bold border-t mt-1 pt-1"><span>الإجمالي:</span> <span>{order.total.toLocaleString()} د.ع</span></div></div></div><div className="flex flex-col justify-between"><h4 className="font-semibold text-gray-700 mb-2">حالة الطلب:</h4><select value={order.status} onChange={(e) => onUpdateOrderStatus(order.id, e.target.value)} className={`p-2 border-2 rounded-lg font-semibold text-sm transition-colors w-full ${orderStatuses[order.status]?.selectColor || 'bg-gray-100 border-gray-300'}`}>{Object.keys(orderStatuses).map(statusKey => (<option key={statusKey} value={statusKey}>{orderStatuses[statusKey].text}</option>))}</select></div></div></div>))}</div></div>);};
const AdminCouponManagement = ({ coupons, onAddCoupon, onDeleteCoupon }) => { const [code, setCode] = useState(''); const [type, setType] = useState('percent'); const [value, setValue] = useState(''); const handleAdd = (e) => { e.preventDefault(); if (!code || !value) return; onAddCoupon({ code, type, value: parseInt(value), id: Date.now() }); setCode(''); setValue(''); }; return (<div className="bg-white p-4 sm:p-6 rounded-lg shadow-md"><h2 className="text-2xl font-semibold mb-6">إدارة الكوبونات</h2><form onSubmit={handleAdd} className="flex flex-col gap-4 mb-8 p-4 border rounded-lg bg-gray-50"><div className="w-full"><label className="block text-sm font-medium text-gray-700 mb-1">رمز الكوبون</label><input type="text" placeholder="e.g. RAMADAN25" value={code} onChange={e => setCode(e.target.value.toUpperCase())} className="p-2 border rounded-md w-full" required /></div><div className="flex gap-4"><div className="flex-1 w-full"><label className="block text-sm font-medium text-gray-700 mb-1">النوع</label><select value={type} onChange={e => setType(e.target.value)} className="p-2 border rounded-md bg-white w-full"><option value="percent">%</option><option value="fixed">د.ع</option></select></div><div className="flex-1 w-full"><label className="block text-sm font-medium text-gray-700 mb-1">القيمة</label><input type="number" placeholder="e.g. 10" value={value} onChange={e => setValue(e.target.value)} className="p-2 border rounded-md w-full" required /></div></div><button type="submit" className="bg-blue-600 text-white py-2 px-6 rounded-md font-semibold hover:bg-blue-700 w-full">إضافة كوبون</button></form><div className="overflow-x-auto"><ul>{coupons.map(coupon => (<li key={coupon.id} className="flex justify-between items-center p-3 border-b last:border-b-0 hover:bg-gray-50"><div className="flex items-center gap-3"><span className="font-mono text-blue-600 bg-blue-50 px-2 py-1 rounded">{coupon.code}</span><span className="text-gray-600 text-sm">{coupon.type === 'percent' ? 'نسبة مئوية' : 'مبلغ ثابت'}</span></div><div className="flex items-center gap-3"><span className="font-semibold">{coupon.type === 'percent' ? `${coupon.value}%` : `${coupon.value.toLocaleString()} د.ع`}</span><button onClick={() => onDeleteCoupon(coupon.id)} className="text-red-500 hover:text-red-700 p-2"><Trash2 size={18} /></button></div></li>))}</ul></div></div>);};

// --- مكونات التحليلات الجديدة ---
const StatsCard = ({ title, value, icon }) => (<div className="bg-white p-6 rounded-lg shadow-md flex items-center gap-4"><div className="bg-blue-100 text-blue-600 p-3 rounded-full">{icon}</div><div><p className="text-sm text-gray-500">{title}</p><p className="text-2xl font-bold text-gray-800">{value}</p></div></div>);
const AdminDashboard = ({ orders, customers }) => {
    const stats = useMemo(() => {
        const deliveredOrders = orders.filter(o => o.status === 'delivered');
        const totalSales = deliveredOrders.reduce((sum, order) => sum + order.total, 0);
        const totalOrders = orders.length;
        const avgOrderValue = deliveredOrders.length > 0 ? totalSales / deliveredOrders.length : 0;
        return { totalSales, totalOrders, totalCustomers: customers.length, avgOrderValue: Math.round(avgOrderValue), };
    }, [orders, customers]);

    const salesData = useMemo(() => {
        const salesByDay = orders.filter(o => o.status === 'delivered').reduce((acc, order) => { const date = new Date(order.date).toLocaleDateString('en-CA'); if (!acc[date]) { acc[date] = 0; } acc[date] += order.total; return acc; }, {});
        return Object.keys(salesByDay).map(date => ({ date, sales: salesByDay[date] })).sort((a, b) => new Date(a.date) - new Date(b.date));
    }, [orders]);

    const statusData = useMemo(() => {
        const statusCounts = orders.reduce((acc, order) => { acc[order.status] = (acc[order.status] || 0) + 1; return acc; }, {});
        return Object.keys(statusCounts).map(status => ({ name: orderStatuses[status].text, value: statusCounts[status] }));
    }, [orders]);
    
    const PIE_COLORS = { pending: '#FBBF24', shipped: '#3B82F6', delivered: '#10B981', cancelled: '#EF4444' };

    return (
        <div className="space-y-8">
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
                <StatsCard icon={<DollarSign size={24} />} title="إجمالي المبيعات (المكتملة)" value={`${stats.totalSales.toLocaleString()} د.ع`} />
                <StatsCard icon={<ShoppingBag size={24} />} title="إجمالي الطلبات" value={stats.totalOrders} />
                <StatsCard icon={<UsersIcon size={24} />} title="إجمالي العملاء" value={stats.totalCustomers} />
                <StatsCard icon={<BarChart2 size={24} />} title="متوسط قيمة الطلب" value={`${stats.avgOrderValue.toLocaleString()} د.ع`} />
            </div>
            <div className="grid grid-cols-1 lg:grid-cols-5 gap-8">
                <div className="lg:col-span-3 bg-white p-6 rounded-lg shadow-md"><h3 className="font-semibold mb-4 text-gray-800">أداء المبيعات اليومي</h3><ResponsiveContainer width="100%" height={300}><LineChart data={salesData} margin={{ top: 5, right: 20, left: -10, bottom: 5 }}><CartesianGrid strokeDasharray="3 3" /><XAxis dataKey="date" fontSize={12} /><YAxis fontSize={12} tickFormatter={(value) => `${(value / 1000).toLocaleString()}k`} /><Tooltip formatter={(value) => `${value.toLocaleString()} د.ع`} /><Legend /><Line type="monotone" dataKey="sales" name="المبيعات" stroke="#3B82F6" strokeWidth={2} dot={{ r: 4 }} activeDot={{ r: 8 }} /></LineChart></ResponsiveContainer></div>
                <div className="lg:col-span-2 bg-white p-6 rounded-lg shadow-md"><h3 className="font-semibold mb-4 text-gray-800">توزيع حالات الطلب</h3><ResponsiveContainer width="100%" height={300}><PieChart><Pie data={statusData} dataKey="value" nameKey="name" cx="50%" cy="50%" outerRadius={100} labelLine={false} label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}>{statusData.map((entry, index) => { const statusKey = Object.keys(orderStatuses).find(key => orderStatuses[key].text === entry.name); return <Cell key={`cell-${index}`} fill={PIE_COLORS[statusKey]} />; })}</Pie><Tooltip /></PieChart></ResponsiveContainer></div>
            </div>
            <div className="bg-white p-4 sm:p-6 rounded-lg shadow-md"><h3 className="text-2xl font-semibold mb-6">قائمة العملاء</h3><div className="overflow-x-auto"><table className="min-w-full bg-white text-right"><thead className="bg-gray-50 text-sm text-gray-600 uppercase"><tr><th className="py-3 px-4">الاسم الكامل</th><th className="py-3 px-4">البريد الإلكتروني</th><th className="py-3 px-4">رقم الهاتف</th><th className="py-3 px-4">إجمالي الطلبات</th></tr></thead><tbody className="text-gray-700">{customers.map(customer => (<tr key={customer.email} className="border-b hover:bg-gray-50"><td className="py-4 px-4 font-medium">{customer.fullName}</td><td className="py-4 px-4 text-sm">{customer.email}</td><td className="py-4 px-4 text-sm">{customer.phone}</td><td className="py-4 px-4 text-sm">{customer.orderCount}</td></tr>))}</tbody></table></div></div>
        </div>
    );
};

// تعديل: تحويل لوحة التحكم إلى نظام تبويبات قابل للسحب
const AdminPanel = ({ products, orders, coupons, customers, onAddProduct, onUpdateProduct, onDeleteProduct, onUpdateOrderStatus, onAddCoupon, onDeleteCoupon, onUpdateStock }) => {
    const [activeTab, setActiveTab] = useState('dashboard');

    const renderContent = () => {
        switch (activeTab) {
            case 'dashboard': return <AdminDashboard orders={orders} customers={customers} />;
            case 'orders': return <AdminOrderManagement orders={orders} onUpdateOrderStatus={onUpdateOrderStatus} />;
            case 'products': return <AdminProductManagement products={products} onAddProduct={onAddProduct} onUpdateProduct={onUpdateProduct} onDeleteProduct={onDeleteProduct} onUpdateStock={onUpdateStock} />;
            case 'coupons': return <AdminCouponManagement coupons={coupons} onAddCoupon={onAddCoupon} onDeleteCoupon={onDeleteCoupon} />;
            default: return null;
        }
    };

    const tabs = [
        { id: 'dashboard', label: 'التحليلات', icon: <LayoutDashboard size={20} /> },
        { id: 'orders', label: 'الطلبات', icon: <ShoppingBag size={20} /> },
        { id: 'products', label: 'المنتجات', icon: <Package size={20} /> },
        { id: 'coupons', label: 'الكوبونات', icon: <Gift size={20} /> },
    ];

    return (
        <div className="container mx-auto px-4 py-8">
            <h1 className="text-3xl font-bold text-center mb-4">لوحة تحكم المدير</h1>
            {/* حاوية الشريط القابل للسحب */}
            <div className="w-full overflow-x-auto pb-2 scrollbar-hide">
                <div className="mb-8 border-b border-gray-200">
                    <nav className="-mb-px flex space-x-6" aria-label="Tabs">
                        {tabs.map(tab => (
                            <button
                                key={tab.id}
                                onClick={() => setActiveTab(tab.id)}
                                className={`${
                                    activeTab === tab.id
                                        ? 'border-blue-500 text-blue-600'
                                        : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                                } flex-shrink-0 flex items-center gap-2 whitespace-nowrap py-4 px-3 border-b-2 font-medium text-sm transition-colors`}
                            >
                                {tab.icon}
                                {tab.label}
                            </button>
                        ))}
                    </nav>
                </div>
            </div>
            <div>{renderContent()}</div>
        </div>
    );
};


// --- التطبيق الرئيسي ---
function App() {
  const [currentUser, setCurrentUser] = useState(null);
  const [isAdmin, setIsAdmin] = useState(false);
  const [products, setProducts] = useState(initialProducts);
  const [orders, setOrders] = useState([]);
  const [coupons, setCoupons] = useState(initialCoupons);
  const [cart, setCart] = useState([]);
  const [favorites, setFavorites] = useState([]);
  const [isCartOpen, setIsCartOpen] = useState(false);
  const [page, setPage] = useState('home'); 
  const [selectedProduct, setSelectedProduct] = useState(null);
  const [searchTerm, setSearchTerm] = useState('');
  const [activeCategory, setActiveCategory] = useState('الكل');
  const [fromCheckout, setFromCheckout] = useState(false);
  const [adminNotifications, setAdminNotifications] = useState([]);
  const [isNotificationsOpen, setIsNotificationsOpen] = useState(false);
  const [userNotifications, setUserNotifications] = useState([]);

  const customers = useMemo(() => { const customerData = orders.reduce((acc, order) => { const email = order.userEmail; if (!acc[email]) { acc[email] = { email: email, fullName: order.customer.fullName, phone: order.customer.phone, orderCount: 0, }; } acc[email].orderCount += 1; return acc; }, {}); return Object.values(customerData); }, [orders]);
  const addNotification = (message, type = 'info') => { setUserNotifications(prev => [...prev, { id: Date.now(), message, type }]); };
  const removeNotification = (id) => { setUserNotifications(prev => prev.filter(n => n.id !== id)); };
  const handleNavigate = (targetPage) => { window.scrollTo(0, 0); if (targetPage === 'checkout' && !currentUser) { setFromCheckout(true); setPage('account'); return; } if (targetPage === 'admin' && !isAdmin) { setPage('home'); return; } if (targetPage === 'home') setSelectedProduct(null); setPage(targetPage); setFromCheckout(false); }
  const handleLogin = (user) => { const userData = { ...user, loyaltyPoints: user.loyaltyPoints || 100, fullName: user.fullName || 'زبون جديد', phone: user.phone || '' }; setCurrentUser(userData); if (user.email.toLowerCase() === ADMIN_EMAIL) { setIsAdmin(true); } else { addNotification(`مرحباً بعودتك، ${userData.fullName}!`, 'success'); } if (fromCheckout) { setPage('checkout'); setFromCheckout(false); } else { setPage(user.email.toLowerCase() === ADMIN_EMAIL ? 'admin' : 'home'); } };
  const handleLogout = () => { setCurrentUser(null); setIsAdmin(false); setCart([]); setFavorites([]); setPage('home'); };
  const handleUpdateProfile = (profileData) => { setCurrentUser(prev => ({ ...prev, fullName: profileData.fullName, phone: profileData.phone })); addNotification('تم تحديث ملفك الشخصي بنجاح!', 'success'); };
  const handlePlaceOrder = (orderDetails) => { const newOrder = { ...orderDetails, id: Date.now(), date: new Date().toISOString(), status: 'pending', userEmail: currentUser.email }; setOrders(prev => [newOrder, ...prev]); const newNotification = { id: newOrder.id, message: `طلب جديد من ${newOrder.customer.fullName}`, details: `بقيمة ${newOrder.total.toLocaleString()} د.ع`, date: new Date(), }; setAdminNotifications(prev => [newNotification, ...prev]); setProducts(prevProducts => { const updatedProducts = [...prevProducts]; orderDetails.items.forEach(cartItem => { const productIndex = updatedProducts.findIndex(p => p.id === cartItem.id); if (productIndex !== -1) { updatedProducts[productIndex] = { ...updatedProducts[productIndex], stock: updatedProducts[productIndex].stock - cartItem.quantity }; } }); return updatedProducts; }); const pointsEarnedFromOrder = orderDetails.items.reduce((totalPoints, item) => { return totalPoints + ((item.pointsEarned || 0) * item.quantity); }, 0); setCurrentUser(prevUser => ({ ...prevUser, loyaltyPoints: prevUser.loyaltyPoints - orderDetails.pointsUsed + pointsEarnedFromOrder })); setCart([]); handleNavigate('orderConfirmation'); };
  const handleUpdateOrderStatus = (orderId, newStatus) => { setOrders(prevOrders => prevOrders.map(order => { if (order.id === orderId && order.status !== newStatus) { console.log(`Order ${orderId} status changed to ${newStatus}. A notification should be sent to ${order.userEmail}`); } return order.id === orderId ? { ...order, status: newStatus } : order; })); addNotification('تم تحديث حالة الطلب بنجاح', 'info'); };
  const handleAddCoupon = (coupon) => { setCoupons(prev => [coupon, ...prev]); };
  const handleDeleteCoupon = (couponId) => { setCoupons(prev => prev.filter(c => c.id !== couponId)); };
  const handleToggleFavorite=(productId)=>{setFavorites(prevFavorites=>{const isFavorited=prevFavorites.some(p=>p.id===productId);if(isFavorited){return prevFavorites.filter(p=>p.id!==productId);}else{const productToAdd=products.find(p=>p.id===productId);return productToAdd ? [...prevFavorites,productToAdd] : prevFavorites;}});};
  const handleAddToCart = (product) => { if (product.stock === 0) return; setCart(prevCart => { const existingItem = prevCart.find(item => item.id === product.id); if (existingItem) { if (existingItem.quantity < product.stock) { return prevCart.map(item => item.id === product.id ? { ...item, quantity: item.quantity + 1 } : item); } return prevCart; } return [...prevCart, { ...product, quantity: 1 }]; }); setIsCartOpen(true); addNotification(`${product.name} أضيف إلى السلة`, 'success'); };
  const handleUpdateQuantity = (productId, newQuantity) => { const product = products.find(p => p.id === productId); if (newQuantity > product.stock) { addNotification(`الكمية المطلوبة غير متوفرة، المتبقي ${product.stock} فقط`, 'error'); return; } if (newQuantity < 1) { handleRemoveFromCart(productId); return; } setCart(prevCart => prevCart.map(item => item.id === productId ? { ...item, quantity: newQuantity } : item)); };
  const handleRemoveFromCart=(productId)=>setCart(prevCart => prevCart.filter(item=>item.id!==productId));
  const cartItemCount=cart.reduce((sum,item)=>sum+item.quantity,0);
  const handleSelectProduct=(product)=>{setSelectedProduct(product);setPage('productDetail');};
  const handleAddProduct = (newProductData) => { const productToAdd = { ...newProductData, id: Date.now() }; productToAdd.images = productToAdd.images.map(img => (img instanceof File) ? URL.createObjectURL(img) : img); setProducts(prev => [productToAdd, ...prev]); };
  const handleUpdateProduct = (updatedProductData) => { const productToUpdate = { ...updatedProductData }; productToUpdate.images = productToUpdate.images.map(img => (img instanceof File) ? URL.createObjectURL(img) : img); setProducts(prev => prev.map(p => p.id === productToUpdate.id ? productToUpdate : p)); };
  const handleDeleteProduct = (productId) => setProducts(prev => prev.filter(p => p.id !== productId));
  const handleUpdateStock = (productId, adjustment) => { setProducts(prevProducts => prevProducts.map(p => p.id === productId ? { ...p, stock: Math.max(0, p.stock + adjustment) } : p )); };
  const filteredProducts=useMemo(()=>{return products.filter(product=>{const matchesCategory=activeCategory==='الكل'||product.category===activeCategory;const matchesSearch=product.name.toLowerCase().includes(searchTerm.toLowerCase());return matchesCategory&&matchesSearch;});},[searchTerm,activeCategory,products]);
  const userOrders = useMemo(() => orders.filter(o => o.userEmail === currentUser?.email), [orders, currentUser]);

  const renderPage = () => {
      if (selectedProduct) return <ProductDetailPage product={selectedProduct} onBack={() => handleNavigate('home')} onAddToCart={handleAddToCart} onToggleFavorite={handleToggleFavorite} isFavorite={favorites.some(p => p.id === selectedProduct.id)} />;
      switch (page) {
          case 'favorites': return <FavoritesPage favorites={favorites} onAddToCart={handleAddToCart} onProductSelect={handleSelectProduct} onToggleFavorite={handleToggleFavorite} />;
          case 'orders': return <OrdersPage orders={userOrders} />;
          case 'account': return <AccountPage currentUser={currentUser} onLogin={handleLogin} onLogout={handleLogout} fromCheckout={fromCheckout} onNavigate={handleNavigate} />;
          case 'editProfile': return <EditProfilePage currentUser={currentUser} onUpdateProfile={handleUpdateProfile} onNavigate={handleNavigate} />;
          case 'checkout': return <CheckoutPage cart={cart} onPlaceOrder={handlePlaceOrder} currentUser={currentUser} coupons={coupons} deliveryFee={DELIVERY_FEE} />;
          case 'orderConfirmation': return <OrderConfirmationPage onNavigate={handleNavigate} />;
          case 'admin': return <AdminPanel products={products} orders={orders} coupons={coupons} customers={customers} onAddProduct={handleAddProduct} onUpdateProduct={handleUpdateProduct} onDeleteProduct={handleDeleteProduct} onUpdateOrderStatus={handleUpdateOrderStatus} onAddCoupon={handleAddCoupon} onDeleteCoupon={handleDeleteCoupon} onUpdateStock={handleUpdateStock} />;
          case 'home':
          default:
              return (
                  <>
                      <SearchBar onSearchChange={setSearchTerm} />
                      <CategoryBar onCategoryChange={setActiveCategory} activeCategory={activeCategory} categories={categories} />
                      <div className="container mx-auto px-4">
                         <ProductList products={filteredProducts} onAddToCart={handleAddToCart} onProductSelect={handleSelectProduct} onToggleFavorite={handleToggleFavorite} favoritesList={favorites} />
                      </div>
                  </>
              );
      }
  };

  return (
    <>
      {/* هذا الكود لإخفاء شريط التمرير بصرياً مع الحفاظ على وظيفته
        في مشروع حقيقي، يتم وضعه في ملف CSS الرئيسي
      */}
      <style>{`
        .scrollbar-hide::-webkit-scrollbar {
            display: none;
        }
        .scrollbar-hide {
            -ms-overflow-style: none;
            scrollbar-width: none;
        }
      `}</style>
      <div className="bg-gray-50 min-h-screen font-sans" dir="rtl">
        <div className="fixed top-0 right-0 z-[200] p-4 space-y-2">
            {userNotifications.map(notif => (
                <NotificationToast key={notif.id} notification={notif} onClose={() => removeNotification(notif.id)} />
            ))}
        </div>
        <Header 
          cartItemCount={cartItemCount} 
          adminNotificationCount={adminNotifications.length} 
          onCartClick={() => setIsCartOpen(true)} 
          currentUser={currentUser} 
          onNavigate={handleNavigate} 
          onLogout={handleLogout}
          isAdmin={isAdmin}
          onAdminNotificationsClick={() => setIsNotificationsOpen(prev => !prev)}
        />
        {isAdmin && isNotificationsOpen && 
          <AdminNotificationsPanel 
              notifications={adminNotifications} 
              onClear={() => setAdminNotifications([])}
              onClose={() => setIsNotificationsOpen(false)}
          />
        }
        <ShoppingCartSidebar isOpen={isCartOpen} onClose={() => setIsCartOpen(false)} cart={cart} onUpdateQuantity={handleUpdateQuantity} onRemoveFromCart={handleRemoveFromCart} onNavigate={handleNavigate} />
        <main className="pb-20 md:pb-0">{renderPage()}</main>
        <Footer />
        <BottomNavBar activePage={page} onNavigate={handleNavigate} isAdmin={isAdmin} />
      </div>
    </>
  );
}

export default App;
